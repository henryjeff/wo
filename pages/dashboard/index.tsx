import type { NextPage } from "next";
import Head from "next/head";
import styles from "./Dashboard.module.css";
import WorkoutCard from "../../components/WorkoutCard";
import Graph from "../../components/Graph";
import FileUpload from "../../components/FileUpload";
import { useEffect, useState } from "react";
import { FixedSizeList as List } from "react-window";
import Analyzer from "../../util/analysis/Analyzer";
import { motion, AnimatePresence, AnimateSharedLayout } from "framer-motion";

const Home: NextPage = () => {
  const [data, setData] = useState<MetaWorkout[]>([]);

  const refetchData = () => {
    fetch("/api/workouts").then((res) =>
      res.json().then((data) => {
        const analyzer = new Analyzer();
        const metaWorkouts = analyzer.analyzeWorkouts(data.workouts);
        const workouts = metaWorkouts.sort((a: MetaWorkout, b: MetaWorkout) => {
          const aDate = new Date(a.date);
          const bDate = new Date(b.date);
          return aDate.getTime() - bDate.getTime();
        });

        console.log(analyzer.liftToGroupMap);
        // setData(workouts.splice(0, 10));
        setData(workouts);
      })
    );
  };

  // const rowRenderer: ListRowRenderer = ({
  //   key, // Unique key within array of rows
  //   index, // Index of row within collection
  //   // isScrolling, // The List is currently being scrolled
  //   // isVisible, // This row is visible within the List (eg it is not an overscanned row)
  //   // style, // Style object to be applied to row (to position it)
  // }) => {
  //   return (
  //     <div style={{ height: 100, width: 200 }}>
  //       <WorkoutCard key={key} workout={data[index]} />
  //     </div>
  //   );
  // };

  const Row = ({ index }: { index: number }) => (
    <motion.div
      style={{ flex: 1 }}
      key={`workout-${index}`}
      layoutId={`workout-card-${index}`}
      onClick={() => setSelectedIndex(index)}
    >
      <WorkoutCard workout={data[index]} id={`${index}`} />
    </motion.div>
  );

  const [selectedIndex, setSelectedIndex] = useState(-1);

  const WorkoutInfo = ({ index }: { index: number }) => {
    return (
      <motion.div
        className={styles.selectedWorkoutInfo}
        layoutId={`workout-card-${index}`}
        onClick={() => setSelectedIndex(-1)}
      >
        <WorkoutCard workout={data[index]} id={`${index}`} expanded={true} />
      </motion.div>
    );
  };

  return (
    <div>
      <Head>
        <title>Workout Analyzer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* @ts-ignore */}
      <AnimateSharedLayout type="crossfade">
        <div className={styles.layout}>
          <div className={`${styles.sidebar} no-scrollbar`}>
            {data.map((workout, i) => {
              return (
                <motion.div
                  style={{ flex: 1 }}
                  key={`workout-${i}`}
                  layoutId={`workout-card-${i}`}
                  onClick={() => setSelectedIndex(i)}
                >
                  <WorkoutCard workout={workout} id={`${i}`} />
                </motion.div>
              );
            })}
            {/* <List height={150} itemCount={1000} itemSize={35} width={300}>
              {Row}
            </List> */}
          </div>
          <motion.div className={styles.content} layoutId="dashboard-content">
            {/* <Graph data={graphData} /> */}
            <span>
              <button onClick={refetchData}>
                <p>Get Data</p>
              </button>
            </span>
            <div />
            <div className={styles.selectedWorkout}>
              <AnimatePresence>
                {selectedIndex > 0 && (
                  <WorkoutInfo index={selectedIndex} key="item" />
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>
      </AnimateSharedLayout>
    </div>
  );
};

export default Home;
