import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import styles from "./Dashboard.module.css";
import WorkoutCard from "../../components/WorkoutCard";
import { useState } from "react";
import Analyzer from "../../util/analysis/Analyzer";
import { motion, AnimatePresence, AnimateSharedLayout } from "framer-motion";
import WorkoutCardList from "../../components/WorkoutCardList";
import Layout from "../../components/Layout";
import SearchInput from "../../components/SearchInput";
import Graph from "../../components/Graph";
import wow from "../../util/graphing/graphing";
import Badge from "../../components/Badge";
import {
  totalNumLifts,
  totalNumReps,
  totalNumSets,
  totalNumWorkouts,
} from "../../util/analysis/sums";
import Popover from "../../components/Popover";
import { WorkoutTypeFilter } from "../../components/Filters";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSort } from "@fortawesome/free-solid-svg-icons";

const Home: NextPage = () => {
  const [data, setData] = useState<MetaWorkout[]>([]);

  const refetchData = () => {
    fetch("/api/workouts").then((res) =>
      res.json().then((data) => {
        const analyzer = new Analyzer();
        const metaWorkouts = analyzer.analyzeWorkouts(data.workouts);
        const workouts = metaWorkouts.sort((a: MetaWorkout, b: MetaWorkout) => {
          const aDate = new Date(a.date);
          const bDate = new Date(b.date);
          return bDate.getTime() - aDate.getTime();
        });

        console.log(analyzer.liftToGroupMap);
        setData(workouts);
      })
    );
  };

  const [selectedIndex, setSelectedIndex] = useState(-1);

  const WorkoutInfo = ({ index }: { index: number }) => {
    const workout = data[index];
    if (!workout) return null;

    return (
      <motion.div
        className={`${styles.selectedWorkoutInfo} ${styles.itemOverlay}`}
        key={`workout-card-${index}`}
        layoutId={`workout-card-${index}`}
      >
        <WorkoutCard
          workout={workout}
          id={`${index}`}
          expanded={true}
          onClose={() => setSelectedIndex(-1)}
        />
      </motion.div>
    );
  };

  return (
    <>
      <Head>
        <title>Workout Analyzer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <motion.div
          className={styles.overlay}
          animate={selectedIndex > -1 ? "open" : "closed"}
          variants={overlayVars}
        />
        {/* @ts-ignore */}
        <AnimateSharedLayout type="crossfade">
          <div className={styles.layout}>
            <div className={styles.sidebar}>
              <div className={styles.sidebarHeader}>
                <h1>Dashboard</h1>
                <div className={styles.searchContainer}>
                  {/* <SearchInput onChange={() => {}} /> */}
                  <Popover text="By Type">
                    <h3>Type</h3>
                    <h4>Filter by workout type, {"(eg. Push, Pull)"}</h4>
                    <br></br>
                    <WorkoutTypeFilter />
                  </Popover>

                  <div>
                    <p>Sort</p>
                    <FontAwesomeIcon icon={faSort} />
                  </div>
                </div>
              </div>
              <WorkoutCardList workouts={data} onCardClick={setSelectedIndex} />
            </div>

            <div className={styles.content}>
              <div className={styles.contentHeader}>
                <h1>Statistics</h1>
                <div className={styles.contentHeaderBadges}>
                  <Badge text={`${totalNumWorkouts(data)} workouts`} />
                  <Badge text={`${totalNumLifts(data)} lifts`} />
                  <Badge text={`${totalNumSets(data)} sets`} />
                  <Badge text={`${totalNumReps(data)} reps`} />
                </div>
              </div>
              {/* {data && <Graph data={wow(data)} />} */}
              <br />
              <span>
                <button onClick={refetchData}>
                  <p>Get Data</p>
                </button>
              </span>
            </div>
          </div>
          <AnimatePresence>
            <div className={styles.selectedWorkout}>
              {<WorkoutInfo index={selectedIndex} />}
            </div>
          </AnimatePresence>
        </AnimateSharedLayout>
      </Layout>
    </>
  );
};

const overlayVars = {
  open: {
    opacity: 1,
    transition: {
      duration: 0.2,
      ease: "easeInOut",
    },
  },
  closed: {
    opacity: 0,
    transition: {
      duration: 0,
      ease: "easeInOut",
    },
  },
};

export default Home;
